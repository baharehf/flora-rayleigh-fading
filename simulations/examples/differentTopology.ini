[General]
#record-eventlog = true
#eventlog-file = results/my_sim_eventlog.log
#debug-on-errors = true

network = flora.simulations.LoRaNetworkTest

**.maxTransmissionDuration = 4s
**.energyDetection = -110dBm

# Output files
output-vector-file = results/differentTopology/differentTopology-${runnumber}.vec
output-scalar-file = results/differentTopology/differentTopology-${runnumber}.sca
eventlog-file = results/differentTopology/differentTopology-${runnumber}.elog
snapshot-file = results/differentTopology/differentTopology-${runnumber}.sna
cmdenv-output-file = results/differentTopology/differentTopology-${runnumber}.out

# Recording Configuration
**.powerConsumption:vector.vector-recording = false
**.residualEnergyCapacity:vector.vector-recording = false
**.loRaNodes[*].**.queueLength:vector.vector-recording = false
**.loRaNodes[*].**.queueBitLength:vector.vector-recording = false
**.loRaNodes[*].**.outgoingPacketLengths:vector.vector-recording = false
**.loRaNodes[*].**.outgoingDataRate:vector.vector-recording = false
**.loRaNodes[*].**.queueingTime:vector.vector-recording = false
**.loRaNodes[*].**.radioMode:vector.vector-recording = false
**.loRaNodes[*].**.incomingDataRate:vector.vector-recording = false
**.loraNodes[*].**.queueingTime:vector.vector-recording = false
**.loRaNodes[*].**.vector-recording = true
**.Calculated SNRmargin in ADR.vector-recording = true
**.SNIR_GW for Node*.vector-recording = true
**.Vector of RSSI per node.vector-recording = true
**.Received Sequence number.vector-recording = true
**.SNRm for Node*.vector-recording = true
**.vector-recording = false

rng-class = "cMersenneTwister"
**.loRaGW[*].numUdpApps = 1
**.loRaGW[*].packetForwarder.localPort = 2000
**.loRaGW[*].packetForwarder.destPort = 1000
**.loRaGW[*].packetForwarder.destAddresses = "networkServer"
**.loRaGW[*].packetForwarder.indexNumber = 0

**.networkServer.numApps = 1
**.networkServer.**.adrDeviceMargin = 15
**.networkServer.**.evaluateADRinServer = ${adrstatus = true, false}
**.networkServer.app[0].typename = "NetworkServerApp"
**.networkServer.app[0].destAddresses = "loRaGW[0]"
**.networkServer.app[0].destPort = 2000
**.networkServer.app[0].localPort = 1000

# ADR Methods
**.networkServer.app[0].adrMethod = ${adrMethod = "avg","max","avg","min","percentile"}

# Editing ADR Algorithms
.**.NODE_setTP14 = ${NODEstatus = true,false}
.**.NS_increaseSF = ${NSstatus = true,false}

# Simulation Configurations
**.numberOfPacketsToSend = 0
sim-time-limit = 30d
warmup-period = 10d
#simtime-resolution = -3
repeat = 1

**.timeToFirstPacket = ${timeToNext=exponential(1000s)}
**.timeToNextPacket = ${timeToNext}
**.alohaChannelModel = false

**.loRaNodes[*].**.initFromDisplayString = false
**.loRaNodes[*].**.evaluateADRinNode = ${adrstatus}
**.loRaNodes[*].**initialLoRaBW = 125 kHz
**.loRaNodes[*].**initialLoRaCR = 4
**.loRaNodes[*].numApps = 1
**.loRaNodes[*].app[0].typename = "SimpleLoRaApp"

**.LoRaGWNic.radio.iAmGateway = true
**.loRaGW[*].**.initFromDisplayString = false

**.loRaNodes[*].LoRaNic.radio.energyConsumer.typename = "LoRaEnergyConsumer"
**.loRaNodes[*].**.energySourceModule = "^.IdealEpEnergyStorage"
**.loRaNodes[*].LoRaNic.radio.energyConsumer.configFile = xmldoc("../energyConsumptionParameters.xml")

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxZ = 0m

LoRaNetworkTest.**.radio.separateTransmissionParts = false
LoRaNetworkTest.**.radio.separateReceptionParts = false

# Channel Models
**.sigma = ${sigma = 0, 1.2, 3.57}
**.ipv4Delayer.config = xmldoc("../cloudDelays.xml")
**.radio.radioMediumModule = "LoRaMedium"
**.LoRaMedium.pathLoss.typename = ${ChannelModel = "FreeSpacePathLoss","LoRaLogNormalShadowing", "LoRaHataOkumura", "LoRaPathLossOulu"}
**.minInterferenceTime = 0s
**.displayAddresses = false
**.constraintAreaMaxX = 480.0m
**.constraintAreaMaxY = 480.0m

# GW Settings
**.numberOfGateways = ${numberOfGateways = 1, 2, 3}
**.loRaGW[0].**.initialX = 240m
**.loRaGW[0].**.initialY = 240m
**.loRaGW[1].**.initialX = 250.00m
**.loRaGW[1].**.initialY = 380.00m
**.loRaGW[2].**.initialX = 500.00m
**.loRaGW[2].**.initialY = 200.00m

# Node Settings
**.numberOfNodes = ${numberOfNodes= 10, 50, 100, 500}
**.loRaNodes[*].**.initialX = uniform(0m, 480m)
**.loRaNodes[*].**.initialY = uniform(0m, 480m)
**.loRaNodes[*].**initialLoRaSF = ${SF= intuniform(7, 12)}
**.loRaNodes[*].**initialLoRaTPIndex = intuniform(0, 4)
**.loRaNodes[*].**initialLoRaTP =
    initialLoRaTPIndex == 0 ? 2 dBm :
    initialLoRaTPIndex == 1 ? 5 dBm :
    initialLoRaTPIndex == 2 ? 8 dBm :
    initialLoRaTPIndex == 3 ? 11 dBm :
                              14 dBm
